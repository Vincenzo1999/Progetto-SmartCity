import traci
import sumolib
import random
import time
from traci.exceptions import TraCIException

# Percorso al file di configurazione SUMO
path = "/home/vincenzo/simulazione _osm/simulazione.sumocfg"

# Avvia la simulazione
traci.start(["sumo-gui", "-c", path])
step = 0
vehicle_routes = {}
for vehicle in sumolib.xml.parse("/home/vincenzo/simulazione _osm/simulazione.rou.xml", "vehicle"):
    route = vehicle.route[0]  # Accesso al primo (e unico) elemento 'route'
    edges = route.edges.split()  # Ottieni la lista degli edges della route
    vehicle_routes[vehicle.id] = edges  # Aggiungi il veicolo e la sua route al dizionario

# Seleziona un veicolo casuale dall'elenco degli ID dei veicoli
veicolo_id = random.choice(list(vehicle_routes.keys()))
print(f"Veicolo selezionato: {veicolo_id}")
def route_update(vehicle_id,end_edge):
    new_destination_list=[]
    for other_vehicle_id, other_route in vehicle_routes.items():
      if other_vehicle_id != vehicle_id and end_edge in other_route:
                        # Trova l'indice dell'edge corrente nella route
        index = other_route.index(end_edge)
                        # Verifica se esiste un edge successivo
        if index + 1 < len(other_route):
          next_edge = other_route[index + 1]
                            # Aggiorna la route del veicolo corrente
          new_destination_list.append(next_edge)  # Aggiungi il prossimo edge alla route
    new_destination= random.choice(new_destination_list)
    #traci.vehicle.changeTarget(veicolo_id,new_destination)
    return new_destination 

# Simulazione con controllo del veicolo
while step < 1000:
    try:
        traci.simulationStep()  # Esegui un passo della simulazione
        current_edge=traci.vehicle.getRoadID(veicolo_id)
        destination = vehicle_routes[veicolo_id][-1]
        print(vehicle_routes[veicolo_id])
        if current_edge == destination :
           new_destination=route_update(veicolo_id,destination)
           traci.vehicle.changeTarget(veicolo_id,new_destination)
           destination=current_edge
        print(step,vehicle_routes[veicolo_id])
        #emissioni = traci.vehicle.getCO2Emission(veicolo_id)  # Ottieni le emissioni di CO2
        #print(f"Step {step}: Emissioni di CO2 del veicolo {veicolo_id}: {emissioni}")
        step +=1
    except TraCIException:
        # Se il veicolo non è conosciuto, attendi e riprova
        print(f"Il veicolo {veicolo_id} non è ancora entrato nella simulazione. Riprovo tra 1 secondo...")
        time.sleep(1)  # Attendi 1 secondo prima di riprovare
        step += 1  # Incrementa il contatore dei passi

traci.close()
